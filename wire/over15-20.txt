http://overthewire.org/wargames/bandit/bandit16.html 
https://jonbornsteinblog.wordpress.com/2017/09/05/overthewire-bandit-levels-10-20/
 

SSL (Secure Sockets Layer) is the standard security technology for establishing an encrypted link 
between a web server and a browser. 
This link ensures that all data passed between the web server and browsers remain private and integral.

openssl - OpenSSL command line tool 
OpenSSL is a cryptography toolkit implementing the Secure Sockets Layer, which is exactly what
 we need from the goal given

ssl is not a command, it is a type of connection. 
 If we scroll to the bottom of the man ssl page we can see that the info shown appeared in Openssl.
 To verify that ssl is not what we want go ahead and try to echo the password and pipe it to ssl with
 localhost 30001
  
15   Submitting a password to a port using SSL encryption.
Level 15 → Level 16
 ssh -l bandit15 bandit.labs.overthewire.org -p 2220
    password = BfMYroe26WYalil77FoDi9qh59eK5xNr   ) 
  


	
The password for the next level can be retrieved by submitting the password of the 
current level to port 30001 on localhost using SSL encryption.

Helpful note: 
  Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS”
  section in the manpage.
  Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of that command… 	

  
The misson here is to find one command to sand password with ssl encryption   
  
run:	openssl s_client -connect localhost:30001 -ign_eof
        enter the  password BfMYroe26WYalil77FoDi9qh59eK5xNr
result: Correct!
       cluFn7wTiGryunymYOu4RcffSxQluehd
	   
 	   
another way
run: echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -quiet -connect localhost:30001


result:
 	depth=0 CN = bandit
	verify error:num=18:self signed certificate
	verify return:1
	depth=0 CN = bandit
	verify return:1
	Correct!
	cluFn7wTiGryunymYOu4RcffSxQluehd
	

16	
Bandit Level 16 → Level 17
Level Goal
https://home.adelphi.edu/~ni21347/cybersecgames/OverTheWire/Bandit/index.html
http://codebluedev.blogspot.com/2015/07/overthewire-bandit-cheat-sheet.html
The credentials for the next level can be retrieved by submitting the password of the current level
to a port on localhost in the range 31000 to 32000. 
First find out which of these ports have a server listening on them. 
Then find out which of those speak SSL and which don’t. There is only 1 server that will give the
 next credentials, the others will simply send back to you whatever you send to it.
 	
ssh -l bandit16 bandit.labs.overthewire.org -p 2220
    password = cluFn7wTiGryunymYOu4RcffSxQluehd   ) 
	
run:nmap localhost -p31000-32000
	result:Starting Nmap 7.01 ( https://nmap.org ) at 2018-07-02 20:51 CEST
	Nmap scan report for localhost (127.0.0.1)
	Host is up (0.00020s latency).
	Other addresses for localhost (not scanned): ::1
	Not shown: 996 closed ports
	PORT      STATE SERVICE
	31046/tcp open  unknown
	31518/tcp open  unknown
	31691/tcp open  unknown
	31790/tcp open  unknown
	31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.07 seconds	

-p flag takes the range of ports to be checked.
So there were 5 ports open.  We need to find which one is for  ssl

another way: nmap -v -A -T4 -p 31000-32000 localhost
PORT      STATE SERVICE     VERSION
31046/tcp open  echo
31518/tcp open  ssl/echo
31691/tcp open  echo
31790/tcp open  ssl/unknown 
31960/tcp open  echo

There are two ssl services but one is echo so it is not the one  we  are looking.
so the only one  that left is 31790
run:  openssl s_client -connect localhost:31790 
enter: paswword  'cluFn7wTiGryunymYOu4RcffSxQluehd'
copy the rsa code
$ mkdir /tmp/test123456
$ cd /tmp/test123456
$ vi sshkey.private
(paste RSA key from openssl earlier)
$ chmod 600 sshkey.private
$ ssh -i ./sshkey.private bandit17@localhost





	ssh commands
What can I do when my SSH session is stuck?
So try this key sequence:

Return

~

Control-z


MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=

