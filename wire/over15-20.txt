http://overthewire.org/wargames/bandit/bandit16.html 
https://jonbornsteinblog.wordpress.com/2017/09/05/overthewire-bandit-levels-10-20/
 

SSL (Secure Sockets Layer) is the standard security technology for 
establishing an encrypted link between a web server and a browser. 
This link ensures that all data passed between the web server and 
browsers remain private and integral.

openssl - OpenSSL command line tool 
OpenSSL is a cryptography toolkit implementing the Secure Sockets Layer, 
which is exactly what  we need from the goal given

ssl is not a command, it is a type of connection. 
 If we scroll to the bottom of the man ssl page we can see that the info 
 shown appeared in Openssl.
 To verify that ssl is not what we want go ahead and try to echo the
 password and pipe it to ssl with  localhost 30001
  
15   Submitting a password to a port using SSL encryption.
Level 15 → Level 16
 ssh -l bandit15 bandit.labs.overthewire.org -p 2220
    password = BfMYroe26WYalil77FoDi9qh59eK5xNr   ) 
  


	
The password for the next level can be retrieved by submitting the
 password of the  current level to port 30001 on localhost using SSL encryption.

Helpful note: 
  Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the
  “CONNECTED COMMANDS”  section in the manpage.
  Next to ‘R’ and ‘Q’, the ‘B’ command also works in this version of 
  that command… 	

  
The misson here is to find one command to sand password with ssl 
encryption   
  
run:	openssl s_client -connect localhost:30001 -ign_eof
        enter the  password BfMYroe26WYalil77FoDi9qh59eK5xNr
result: Correct!
       cluFn7wTiGryunymYOu4RcffSxQluehd
	   
 	   
another way
run: echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -quiet -connect localhost:30001


result:
 	depth=0 CN = bandit
	verify error:num=18:self signed certificate
	verify return:1
	depth=0 CN = bandit
	verify return:1
	Correct!
	cluFn7wTiGryunymYOu4RcffSxQluehd
	

16	
Bandit Level 16 → Level 17
Level Goal
https://home.adelphi.edu/~ni21347/cybersecgames/OverTheWire/Bandit/index.html
http://codebluedev.blogspot.com/2015/07/overthewire-bandit-cheat-sheet.html
The credentials for the next level can be retrieved by submitting the 
password of the current level to a port on localhost in the 
range 31000 to 32000. 
First find out which of these ports have a server listening on them. 
Then find out which of those speak SSL and which don’t. 
There is only 1 server that will give the  next credentials, the 
others will simply send back to you whatever you send to it.
 	
ssh -l bandit16 bandit.labs.overthewire.org -p 2220
    password = cluFn7wTiGryunymYOu4RcffSxQluehd   ) 
	
run:nmap localhost -p31000-32000
	result:Starting Nmap 7.01 ( https://nmap.org ) at 2018-07-02 20:51 CEST
	Nmap scan report for localhost (127.0.0.1)
	Host is up (0.00020s latency).
	Other addresses for localhost (not scanned): ::1
	Not shown: 996 closed ports
	PORT      STATE SERVICE
	31046/tcp open  unknown
	31518/tcp open  unknown
	31691/tcp open  unknown
	31790/tcp open  unknown
	31960/tcp open  unknown

Nmap done: 1 IP address (1 host up) scanned in 0.07 seconds	

-p flag takes the range of ports to be checked.
So there were 5 ports open.  We need to find which one is for  ssl

another way: nmap -v -A -T4 -p 31000-32000 localhost
PORT      STATE SERVICE     VERSION
31046/tcp open  echo
31518/tcp open  ssl/echo
31691/tcp open  echo
31790/tcp open  ssl/unknown 
31960/tcp open  echo

There are two ssl services but one is echo so it is not the one  we 
 are looking.
so the only one  that left is 31790
run:  openssl s_client -connect localhost:31790 
enter: paswword  'cluFn7wTiGryunymYOu4RcffSxQluehd'
copy the rsa code
$ mkdir /tmp/test123456
$ cd /tmp/test123456
$ vi sshkey.private
(paste RSA key from openssl earlier)
$ chmod 600 sshkey.private
$ ssh -i ./sshkey.private bandit17@localhost



xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn




	ssh commands
What can I do when my SSH session is stuck?
So try this key sequence:

Return

~
Level 17 → Level 18


ssh -l bandit17 bandit.labs.overthewire.org -p 2220
    password = xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn   ) 
	
There are 2 files in the homedirectory: 
        passwords.old and passwords.new. 
The password for the next level is in passwords.new and is the only 
line that has been changed between passwords.old and passwords.new


run : diff passwords.new passwords.old
result:
42c42
< kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
---
> 6vcSC74ROI95NqkKaeEC2ABVMDX9TyUr


NOTE: if you have solved this level and see ‘Byebye!’ when trying to 
log into bandit18, this is related to the next level, bandit19
 
Level 18 → Level 19 
	
ssh -l bandit18 bandit.labs.overthewire.org -p 2220
 password = kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd   )	
 
The password for the next level is stored in a file readme in the
 homedirectory. 
Unfortunately, someone  has modified .bashrc to log you out when you 
log in with SSH. 
Entering the password above produces the ‘Byebye !’ message noted 
in the previous level, which also logs you out, explained in this level.

However, apparently you can sneak in commands while trying to connect 
via SSH.
run:   ssh -l bandit18 bandit.labs.overthewire.org -p 2220 cat readme
       enter the password kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd

result 	   IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x

Level 19 → Level 20	  

ssh -l bandit19 bandit.labs.overthewire.org -p 2220
 password = IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x

To gain access to the next level, you should use the setuid binary in 
the homedirectory.
 Execute it without arguments to find out how to use it. 
 The password for this level can be found in the usual 
 place (/etc/bandit_pass), after you have used the setuid binary. 

run:  ./bandit20-do
result: ' Run a command as another user.
  Example: ./bandit20-do id'
run   ./bandit20-do id
result:
uid=11019(bandit19) gid=11019(bandit19) euid=11020(bandit20)
groups=11019(bandit19)

run:./bandit20-do whoami  
result :bandit20 #So now I am  using bandit 20 previlage


run:./bandit20-do cat /etc/bandit_pass/bandit20
result: GbKksEFF4yrVs6il55v6gwY5aVje5f0j


When an executable file has been given the setuid attribute, 
normal users on the system who have permission to execute this file
gain the privileges of the user who owns the file (commonly root)
within the created process.